name: Run Eslint & Vitest Tests

on: # This workflow is triggered on pushes and pull requests to the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-vitest: # This job runs ESLint and Vitest tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code # This step checks out the repository code and allows the workflow to access it
        uses: actions/checkout@v4

      - name: Use Node.js # This step sets up Node.js environment for the workflow
        uses: actions/setup-node@v4
        with:
          node-version: 18 

      - name: Install dependencies # This step installs the project dependencies using npm
        run: npm ci
 
      - name: Run ESLint # This step runs ESLint to check the code for linting errors
        run: npm run lint  
        
      - name: Run tests # This step runs Vitest tests to ensure the code is functioning correctly
        run: npm test

  docker-build-and-push: # This job builds and pushes the Docker image
    runs-on: ubuntu-latest
    needs: lint-and-vitest

    steps:
      - name: Checkout repo # This step checks out the repository code for building the Docker image
        uses: actions/checkout@v4

      - name: Set up Docker Buildx # This step sets up Docker Buildx for building multi-platform images
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry # This step logs in to the GitHub Container Registry using the provided secrets
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      - name: Build Docker image # This step builds the Docker image using the Dockerfile in the repository
        run: docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/twebsite:latest .

      - name: Push Docker image # This step pushes the built Docker image to the GitHub Container Registry
        run: docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/twebsite:latest

  ssh-deploy: # This job deploys the Docker container to the server via SSH
    runs-on: ubuntu-latest
    needs: docker-build-and-push  # Wait until Docker image is built & pushed

    steps:
      - name: Set up SSH key # This step sets up the SSH key for accessing the server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_ed25519 
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts



        # -v /etc/letsencrypt/live/yourdomain.com:/etc/letsencrypt/live/yourdomain.com:ro \


      - name: SSH into server and redeploy container # This step connects to the server via SSH and redeploys the Docker container

      # This step pulls the latest Docker image, stops and removes existing containers, builds the Nginx image, and runs the new containers
      # It then stop and removes the existing containers, builds the custome-Nginx image and sets up the weblink through docker, then runs the new both containers.
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            docker pull ghcr.io/${{ secrets.GHCR_USERNAME }}/twebsite:latest
            
            docker stop nodeapp || true
            docker rm nodeapp || true
            docker stop nginx || true
            docker rm nginx || true
            
            docker rmi -f live-nginx:latest

            cd nginx/conf.d/
            docker build -t live-nginx .

            docker run -d --name nodeapp --network webnet ghcr.io/${{ secrets.GHCR_USERNAME }}/twebsite:latest
            docker update --restart=always nodeapp
            docker restart nginx
          EOF